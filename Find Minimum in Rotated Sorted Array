Find Minimum in Rotated Sorted Array 

Problem Description

Given a rotated sorted array nums, find and return the minimum element.

Must solve in O(log n) time.





Solution Explanation

1. Initialize pointers

left = 0, right = len(nums) - 1



2. Binary search loop while left < right:

Calculate mid = (left + right) // 2

Compare nums[mid] with nums[right]



3. Decide which half to search

If nums[mid] ≤ nums[right] → minimum is in left half including mid → right = mid

Else → minimum is in right half excluding mid → left = mid + 1



4. Return minimum

After loop ends → nums[left] is the minimum







Example

Input: nums = [4,5,6,7,0,1,2]
Output: 0




Time & Space Complexity

Time: O(log n) → Binary search

Space: O(1) → Constant extra space
