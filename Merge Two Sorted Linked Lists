Merge Two Sorted Linked Lists

## Problem
You are given the heads of two *sorted linked lists*.  
Merge them into a single sorted linked list and return its head.



## Approach
1. Create a *dummy node* as a fake head to simplify merging.
2. Use a pointer cur to track the last node of the new list.
3. While both lists have nodes:
   - Compare values from list1 and list2.
   - Attach the smaller node to cur.next.
   - Move forward in that list.
   - Move cur forward.
4. After the loop, attach the remaining nodes (since one list might still have nodes).
5. Return dummy.next as the head of the merged list.


## Complexity
- *Time Complexity:* O(n + m) (traverse both lists once).  
- *Space Complexity:* O(1) (in-place, except for the result list).



## Example
*Input:*

list1 = [1, 3, 5] list2 = [2, 4, 6]

*Output:*

[1, 2, 3, 4, 5, 6]

---
