Pascal’s Triangle 

Problem

Given an integer numRows, return the first numRows of Pascal’s Triangle.

Each number is the sum of the two numbers directly above it.






Explanation 

pascal = [] → final triangle

Loop over i from 0 to numRows-1:

Create row of length i+1 filled with 1s → [1, …, 1]

For each middle element (j=1…i-1), compute:

row[j] = pascal[i-1][j-1] + pascal[i-1][j]

(sum of two numbers from the row above)

Append row to triangle.






Steps Example (numRows = 5)

Row 0: [1]
Row 1: [1, 1]
Row 2: [1, 2, 1] ← (2 = 1+1)
Row 3: [1, 3, 3, 1] ← (3=1+2, 3=2+1)
Row 4: [1, 4, 6, 4, 1] ← (4=1+3, 6=3+3, 4=3+1)

 Output:

[
 [1],
 [1,1],
 [1,2,1],
 [1,3,3,1],
 [1,4,6,4,1]
]




Formula Used

Edge elements always = 1

Middle elements:


row[j] = pascal[i-1][j-1] + pascal[i-1][j]

(Direct parents from previous row)



Time & Space Complexity

Time: O(numRows^2) → nested loop builds all rows

Space: O(numRows^2) → storing the entire triangle
