Evaluate Reverse Polish Notation 

 Problem Statement
Evaluate the value of an arithmetic expression in *Reverse Polish Notation (RPN)*.  
Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

- Division should truncate toward *zero*.  
- The input is always valid, i.e., the given expression is always evaluable.

*Example 1*  
Input: tokens = ["2","1","+","3","*"]  
Output: 9  
Explanation: (2 + 1) * 3 = 9  

*Example 2*  
Input: tokens = ["4","13","5","/","+"]  
Output: 6  
Explanation: 4 + (13 / 5) = 6  

*Example 3*  
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]  
Output: 22  


## Approach 
We use a *stack* to evaluate the expression:

1. Initialize an empty stack.  
2. Traverse each token in the input list:  
   - If the token is a number → push it onto the stack.  
   - If the token is an operator (+, -, *, /):  
     - Pop the top two numbers from the stack.  
     - Apply the operator in the correct order.  
     - Push the result back onto the stack.  
3. At the end, the stack will contain exactly one number → the final result.

---

## Complexity 
- *Time Complexity:* O(n) — we process each token once.  
- *Space Complexity:* O(n) — for the stack.  


Example Dry Run 

Input:
tokens = ["2","1","+","3","*"]

Steps:

Push 2 → stack = [2]

Push 1 → stack = [2, 1]

Operator + → pop 1, 2 → 2+1=3 → push → stack = [3]

Push 3 → stack = [3, 3]

Operator * → pop 3, 3 → 3*3=9 → push → stack = [9]


Output = 9
