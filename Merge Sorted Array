Merge Sorted Array 

Problem

You are given two sorted integer arrays nums1 and nums2, and two integers m and n representing the number of elements in nums1 and nums2 respectively.
nums1 has a size of m + n to hold both arrays.
Merge nums2 into nums1 as one sorted array (in-place).




Explanation 

midx = m - 1 → last index of actual elements in nums1

nidx = n - 1 → last index of nums2

right = m + n - 1 → last position of nums1 (extra space available)


 Idea: Merge from the end to avoid overwriting valid elements of nums1.




Steps

1. Compare nums1[midx] and nums2[nidx].


2. Place the larger one at position right.


3. Move the pointer (midx or nidx) backward.


4. Decrease right.


5. Repeat until all elements of nums2 are placed.





Example

nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Initial:
midx=2 (3), nidx=2 (6), right=5

Step1: 6 > 3 → nums1[5] = 6
nums1 = [1,2,3,0,0,6]

Step2: 5 > 3 → nums1[4] = 5
nums1 = [1,2,3,0,5,6]

Step3: 3 > 2 → nums1[3] = 3
nums1 = [1,2,3,3,5,6]

Step4: 2 = 2 → nums1[2] = 2
nums1 = [1,2,2,3,5,6]

 Final Output: [1,2,2,3,5,6]




Time & Space Complexity

Time: O(m + n) → each element is checked once.

Space: O(1) → in-place merging.
