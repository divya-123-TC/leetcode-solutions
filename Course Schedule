Course Schedule 
This repository contains Python solutions for the popular graph-based problems from LeetCode — *Course Schedule* and *Course Schedule II* — both solved using *Depth-First Search (DFS)* and *Topological Sorting* concepts.
 Course Schedule (LeetCode 207)

### 📝 Problem Statement
There are numCourses courses labeled from 0 to numCourses - 1.  
You are given a list of prerequisites where prerequisites[i] = [a, b] means:
- To take course a, you must first take course b.

Return:
- True if you can finish all courses (no cycle exists),
- False otherwise.

---

### 🧠 Approach (DFS + Cycle Detection)
- Model the courses as a *directed graph*: each node represents a course, and each edge b → a means b is a prerequisite for a.
- Use DFS to explore each course’s prerequisites.
- Maintain a *visited state* for each course:
  - 0 → unvisited  
  - 1 → visiting (currently in recursion)  
  - 2 → visited (completed safely)
- If we ever visit a node that’s already 1 (visiting), a *cycle* exists → cannot finish all courses.

---





⏱ Complexity Analysis

Type	Complexity	Description

Time Complexity	O(V + E)	Each course and prerequisite edge is visited once
Space Complexity	O(V + E)	For the graph and recursion stack



---

✅ Example

Input:

numCourses = 2
prerequisites = [[1, 0]]

Output:

True

Explanation:
You can take course 0 first, then course 1.
