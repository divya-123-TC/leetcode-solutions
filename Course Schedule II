Course Schedule II 
Problem Statement

There are numCourses total courses to take, labeled 0 to numCourses - 1.
Given an array of prerequisites where prerequisites[i] = [a, b],

To take course a, you must first take course b.


Return:

A valid order of courses to complete all courses,

Or an empty list if it‚Äôs impossible (cycle exists).



---

üß† Approach (DFS + Topological Sort)

Build a directed graph similar to the previous problem.

Use DFS to detect cycles and to build a topological ordering.

After visiting all prerequisites of a course, append the course to the result list.

Finally, reverse the result list to get the correct course order.



---



‚è± Complexity Analysis

Type	Complexity	Description

Time Complexity	O(V + E)	Visit all courses and edges once
Space Complexity	O(V + E)	Graph + recursion stack



---

‚úÖ Example

Input:

numCourses = 4
prerequisites = [[1,0],[2,0],[3,1],[3,2]]

Output:

[0, 2, 1, 3]

Explanation:
You must take course 0 before 1 and 2, and both 1 and 2 before 3.
A valid order is [0, 2, 1, 3].
