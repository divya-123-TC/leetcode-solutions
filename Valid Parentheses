Valid Parentheses 

## Problem
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

A string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.

*Example:*

Input: s = "()[]{}" Output: true



Input: s = "(]" Output: false



## Approach

We use a *stack* to keep track of opening brackets and a *mapping dictionary* to match each closing bracket with its corresponding opening one.

- Traverse each character in the string.
- If it’s an *opening bracket* ((, {, [), push it to the stack.
- If it’s a *closing bracket* (), }, ]):
  - Check if the stack is empty → invalid.
  - Otherwise, pop from the stack and verify if it matches the expected opening bracket using the dictionary.
- At the end, if the stack is empty, the string is valid.



Complexity Analysis

Time Complexity: O(n)
We iterate through the string once, each character is processed in O(1).

Space Complexity: O(n)
In the worst case (all opening brackets), we store them in the stack.
