Subsets Problem

 Problem Statement

Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

Order of subsets does not matter.


Example:

Input: nums = [1,2,3]  
Output: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]


 Approach

We use Backtracking (Recursion) to generate all subsets.

At each index i, we have two choices:

1. Include the element nums[i].


2. Exclude the element nums[i].



Continue this process until we reach the end of the array.

At the base case (i == len(nums)), we save the current subset into the result.

Use subset[:] (copy of list) to prevent later modifications from affecting stored subsets.


This explores all possible combinations → total 2^n subsets.




⏱ Complexity Analysis

Time Complexity: O(n * 2^n)

There are 2^n subsets.

Copying each subset takes up to O(n).


Space Complexity:

O(n) for recursion stack + O(n) for temporary subset storage.

Final output takes O(n * 2^n).





 Example Dry Run

For nums = [1,2]

Start → []

Take 1 → [1]  
   Take 2 → [1,2]  ✅ save  
   Skip 2 → [1]    ✅ save  

Skip 1 → []  
   Take 2 → [2]    ✅ save  
   Skip 2 → []     ✅ save

Final Output: [[], [1], [2], [1,2]]
