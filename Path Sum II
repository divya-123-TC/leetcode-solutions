 Path Sum II


---

📘 Problem Statement

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum.

A leaf is a node with no children.


---

💡 Example

Input:

5
       / \
      4   8
     /   / \
    11  13  4
   /  \     / \
  7    2   5   1
targetSum = 22

Output:

[
  [5, 4, 11, 2],
  [5, 8, 4, 5]
]


---

🧠 Approach

This problem is solved using Depth-First Search (DFS) with backtracking.

Steps:

1. Start DFS traversal from the root node.


2. Keep track of the current path (path) and the current sum (curr_sum).


3. If a leaf node is reached and the sum equals targetSum, store the path in the result.


4. Use backtracking to remove the last node before returning to the previous level.






🔍 Line-by-Line Explanation

Line	Explanation

res = []	Stores all valid paths whose sum equals targetSum.
def dfs(node, path, curr_sum):	Helper function for recursive DFS traversal.
if not node:	Base case — if node is None, stop recursion.
path.append(node.val)	Add current node’s value to the path.
curr_sum += node.val	Add the node’s value to the running sum.
if not node.left and not node.right and curr_sum == targetSum:	If it’s a leaf node and sum matches, record this path.
res.append(list(path))	Store a copy of the current path.
dfs(node.left, path, curr_sum)	Explore left subtree.
dfs(node.right, path, curr_sum)	Explore right subtree.
path.pop()	Backtrack — remove last node before returning up.
dfs(root, [], 0)	Start DFS from the root with an empty path and sum 0.
return res	Return all collected valid paths.



---

🌳 Example Trace

For the tree:

5
   / \
  4   8
 /   / \
11  13  4
/ \      \
7  2      1

and targetSum = 22

Traversal:

Path [5, 4, 11, 2] → sum = 22 ✅

Path [5, 8, 4, 5] → sum = 22 ✅
→ Return both paths.



---

⏱ Complexity Analysis

Type	Complexity	Explanation

Time	O(N)	Each node is visited once.
Space	O(H)	H = height of tree (recursion stack + path list).



---

🪄 Key Concepts

DFS + Backtracking

Path tracking

Sum validation at leaf nodes




🏁 Output Example

Input:
root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22

Output:
[[5,4,11,2], [5,8,4,5]]
